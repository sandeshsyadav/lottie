import { EventEmitter, OnDestroy } from '@angular/core';
import { AnimationOptions, BMCompleteEvent, BMCompleteLoopEvent, BMEnterFrameEvent, BMSegmentStartEvent, BMDestroyEvent, BMRenderFrameErrorEvent, BMConfigErrorEvent } from './symbols';
import { AnimationLoader } from './animation-loader';
import { LottieEventsFacade } from './events-facade';
import * as ɵngcc0 from '@angular/core';
export declare class BaseDirective implements OnDestroy {
    private platformId;
    private animationLoader;
    options: AnimationOptions | null;
    containerClass: string | null;
    styles: Partial<CSSStyleDeclaration> | null;
    width: string | null;
    height: string | null;
    /**
     * `animationCreated` is dispatched after calling `loadAnimation`
     */
    animationCreated: EventEmitter<import("lottie-web").AnimationItem>;
    /**
     * `complete` is dispatched after completing the last frame
     */
    complete: EventEmitter<BMCompleteEvent>;
    /**
     * `loopComplete` is dispatched after completing frame loop
     */
    loopComplete: EventEmitter<BMCompleteLoopEvent>;
    /**
     * `enterFrame` is dispatched after entering the new frame
     */
    enterFrame: EventEmitter<BMEnterFrameEvent>;
    /**
     * `segmentStart` is dispatched when the new segment is adjusted
     */
    segmentStart: EventEmitter<BMSegmentStartEvent>;
    /**
     * Original event name is `config_ready`. `config_ready` is dispatched
     * after the needed renderer is configured
     */
    configReady: EventEmitter<void>;
    /**
     * Original event name is `data_ready`. `data_ready` is dispatched
     * when all parts of the animation have been loaded
     */
    dataReady: EventEmitter<void>;
    /**
     * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
     * when elements have been added to the DOM
     */
    domLoaded: EventEmitter<void>;
    /**
     * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,
     * it's useful for releasing resources
     */
    destroy: EventEmitter<BMDestroyEvent>;
    /**
     * `error` will be dispatched if the lottie player could not render
     * some frame or parse config
     */
    error: EventEmitter<BMRenderFrameErrorEvent | BMConfigErrorEvent>;
    private destroy$;
    constructor(platformId: string, animationLoader: AnimationLoader);
    ngOnDestroy(): void;
    protected setWidthAndHeight(): void;
    protected loadAnimation(container: HTMLElement | HTMLCanvasElement, eventsFacade: LottieEventsFacade, instance: BaseDirective): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseDirective, "[lottie]", never, { "options": "options"; "containerClass": "containerClass"; "styles": "styles"; "width": "width"; "height": "height"; }, { "animationCreated": "animationCreated"; "complete": "complete"; "loopComplete": "loopComplete"; "enterFrame": "enterFrame"; "segmentStart": "segmentStart"; "configReady": "configReady"; "dataReady": "dataReady"; "domLoaded": "domLoaded"; "destroy": "destroy"; "error": "error"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiYmFzZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uT3B0aW9ucywgQk1Db21wbGV0ZUV2ZW50LCBCTUNvbXBsZXRlTG9vcEV2ZW50LCBCTUVudGVyRnJhbWVFdmVudCwgQk1TZWdtZW50U3RhcnRFdmVudCwgQk1EZXN0cm95RXZlbnQsIEJNUmVuZGVyRnJhbWVFcnJvckV2ZW50LCBCTUNvbmZpZ0Vycm9yRXZlbnQgfSBmcm9tICcuL3N5bWJvbHMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uTG9hZGVyIH0gZnJvbSAnLi9hbmltYXRpb24tbG9hZGVyJztcbmltcG9ydCB7IExvdHRpZUV2ZW50c0ZhY2FkZSB9IGZyb20gJy4vZXZlbnRzLWZhY2FkZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XG4gICAgcHJpdmF0ZSBhbmltYXRpb25Mb2FkZXI7XG4gICAgb3B0aW9uczogQW5pbWF0aW9uT3B0aW9ucyB8IG51bGw7XG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZyB8IG51bGw7XG4gICAgc3R5bGVzOiBQYXJ0aWFsPENTU1N0eWxlRGVjbGFyYXRpb24+IHwgbnVsbDtcbiAgICB3aWR0aDogc3RyaW5nIHwgbnVsbDtcbiAgICBoZWlnaHQ6IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogYGFuaW1hdGlvbkNyZWF0ZWRgIGlzIGRpc3BhdGNoZWQgYWZ0ZXIgY2FsbGluZyBgbG9hZEFuaW1hdGlvbmBcbiAgICAgKi9cbiAgICBhbmltYXRpb25DcmVhdGVkOiBFdmVudEVtaXR0ZXI8aW1wb3J0KFwibG90dGllLXdlYlwiKS5BbmltYXRpb25JdGVtPjtcbiAgICAvKipcbiAgICAgKiBgY29tcGxldGVgIGlzIGRpc3BhdGNoZWQgYWZ0ZXIgY29tcGxldGluZyB0aGUgbGFzdCBmcmFtZVxuICAgICAqL1xuICAgIGNvbXBsZXRlOiBFdmVudEVtaXR0ZXI8Qk1Db21wbGV0ZUV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBgbG9vcENvbXBsZXRlYCBpcyBkaXNwYXRjaGVkIGFmdGVyIGNvbXBsZXRpbmcgZnJhbWUgbG9vcFxuICAgICAqL1xuICAgIGxvb3BDb21wbGV0ZTogRXZlbnRFbWl0dGVyPEJNQ29tcGxldGVMb29wRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIGBlbnRlckZyYW1lYCBpcyBkaXNwYXRjaGVkIGFmdGVyIGVudGVyaW5nIHRoZSBuZXcgZnJhbWVcbiAgICAgKi9cbiAgICBlbnRlckZyYW1lOiBFdmVudEVtaXR0ZXI8Qk1FbnRlckZyYW1lRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIGBzZWdtZW50U3RhcnRgIGlzIGRpc3BhdGNoZWQgd2hlbiB0aGUgbmV3IHNlZ21lbnQgaXMgYWRqdXN0ZWRcbiAgICAgKi9cbiAgICBzZWdtZW50U3RhcnQ6IEV2ZW50RW1pdHRlcjxCTVNlZ21lbnRTdGFydEV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBPcmlnaW5hbCBldmVudCBuYW1lIGlzIGBjb25maWdfcmVhZHlgLiBgY29uZmlnX3JlYWR5YCBpcyBkaXNwYXRjaGVkXG4gICAgICogYWZ0ZXIgdGhlIG5lZWRlZCByZW5kZXJlciBpcyBjb25maWd1cmVkXG4gICAgICovXG4gICAgY29uZmlnUmVhZHk6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBPcmlnaW5hbCBldmVudCBuYW1lIGlzIGBkYXRhX3JlYWR5YC4gYGRhdGFfcmVhZHlgIGlzIGRpc3BhdGNoZWRcbiAgICAgKiB3aGVuIGFsbCBwYXJ0cyBvZiB0aGUgYW5pbWF0aW9uIGhhdmUgYmVlbiBsb2FkZWRcbiAgICAgKi9cbiAgICBkYXRhUmVhZHk6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBPcmlnaW5hbCBldmVudCBuYW1lIGlzIGBET01Mb2FkZWRgLiBgRE9NTG9hZGVkYCBpcyBkaXNwYXRjaGVkXG4gICAgICogd2hlbiBlbGVtZW50cyBoYXZlIGJlZW4gYWRkZWQgdG8gdGhlIERPTVxuICAgICAqL1xuICAgIGRvbUxvYWRlZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIGBkZXN0cm95YCB3aWxsIGJlIGRpc3BhdGNoZWQgaW4gdGhlIGBuZ09uRGVzdHJveWAgaG9vayBvZiB0aGUgc2VydmljZSxcbiAgICAgKiBpdCdzIHVzZWZ1bCBmb3IgcmVsZWFzaW5nIHJlc291cmNlc1xuICAgICAqL1xuICAgIGRlc3Ryb3k6IEV2ZW50RW1pdHRlcjxCTURlc3Ryb3lFdmVudD47XG4gICAgLyoqXG4gICAgICogYGVycm9yYCB3aWxsIGJlIGRpc3BhdGNoZWQgaWYgdGhlIGxvdHRpZSBwbGF5ZXIgY291bGQgbm90IHJlbmRlclxuICAgICAqIHNvbWUgZnJhbWUgb3IgcGFyc2UgY29uZmlnXG4gICAgICovXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxCTVJlbmRlckZyYW1lRXJyb3JFdmVudCB8IEJNQ29uZmlnRXJyb3JFdmVudD47XG4gICAgcHJpdmF0ZSBkZXN0cm95JDtcbiAgICBjb25zdHJ1Y3RvcihwbGF0Zm9ybUlkOiBzdHJpbmcsIGFuaW1hdGlvbkxvYWRlcjogQW5pbWF0aW9uTG9hZGVyKTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzZXRXaWR0aEFuZEhlaWdodCgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBsb2FkQW5pbWF0aW9uKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBIVE1MQ2FudmFzRWxlbWVudCwgZXZlbnRzRmFjYWRlOiBMb3R0aWVFdmVudHNGYWNhZGUsIGluc3RhbmNlOiBCYXNlRGlyZWN0aXZlKTogdm9pZDtcbn1cbiJdfQ==