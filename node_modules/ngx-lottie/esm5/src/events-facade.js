/**
 * @fileoverview added by tsickle
 * Generated from: src/events-facade.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __read, __values } from "tslib";
import { Injectable, NgZone, Inject, EventEmitter, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
/**
 * Returns only those `EventEmitter` instances that has attached observers
 * @param {?} instance
 * @param {?} eventsMap
 * @return {?}
 */
function getObservedEventEmitters(instance, eventsMap) {
    return (Object.keys(instance)
        // `Object.entries` is not supported in IE11.
        .map((/**
     * @param {?} key
     * @return {?}
     */
    function (key) { return [key, instance[key]]; }))
        .filter((/**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var _b = __read(_a, 2), key = _b[0], property = _b[1];
        return property instanceof EventEmitter &&
            property.observers.length > 0 &&
            eventsMap.hasOwnProperty(key);
    }))
        .map((/**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var _b = __read(_a, 2), key = _b[0], eventEmitter = _b[1];
        return ({
            eventEmitter: eventEmitter,
            name: eventsMap[key]
        });
    })));
}
var LottieEventsFacade = /** @class */ (function () {
    function LottieEventsFacade(ngZone, platformId) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        /**
         * @see https://github.com/airbnb/lottie-web#events
         */
        this.eventsMap = {
            complete: 'complete',
            loopComplete: 'loopComplete',
            enterFrame: 'enterFrame',
            segmentStart: 'segmentStart',
            configReady: 'config_ready',
            dataReady: 'data_ready',
            domLoaded: 'DOMLoaded',
            destroy: 'destroy',
            error: 'error'
        };
        this.animationItem = null;
    }
    /**
     * @return {?}
     */
    LottieEventsFacade.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.dispose();
    };
    /**
     * @param {?} instance
     * @param {?} animationItem
     * @return {?}
     */
    LottieEventsFacade.prototype.addEventListeners = /**
     * @param {?} instance
     * @param {?} animationItem
     * @return {?}
     */
    function (instance, animationItem) {
        var _this = this;
        this.animationItem = animationItem;
        // `AnimationItem` triggers different events every ms, we have to listen
        // them outside Angular's context, thus it won't affect performance
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () { return _this.addEventListenersToObservedEventEmitters(instance); }));
    };
    /**
     * @private
     * @return {?}
     */
    LottieEventsFacade.prototype.dispose = /**
     * @private
     * @return {?}
     */
    function () {
        // The `ng-lottie` component or the `lottie` directive can be destroyed
        // before the `animationItem` is set, thus it will fail with
        // `Cannot read property 'destroy' of null`.
        // Potentially it can happen if the directive gets destroyed before change
        // detection is run.
        if (isPlatformServer(this.platformId) || this.animationItem === null) {
            return;
        }
        // `destroy()` will remove all events listeners
        this.animationItem.destroy();
        this.animationItem = null;
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    LottieEventsFacade.prototype.addEventListenersToObservedEventEmitters = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var e_1, _a;
        /** @type {?} */
        var observedEmitters = getObservedEventEmitters(instance, this.eventsMap);
        var _loop_1 = function (name_1, eventEmitter) {
            (/** @type {?} */ (this_1.animationItem)).addEventListener(name_1, (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                eventEmitter.emit(event);
            }));
        };
        var this_1 = this;
        try {
            for (var observedEmitters_1 = __values(observedEmitters), observedEmitters_1_1 = observedEmitters_1.next(); !observedEmitters_1_1.done; observedEmitters_1_1 = observedEmitters_1.next()) {
                var _b = observedEmitters_1_1.value, name_1 = _b.name, eventEmitter = _b.eventEmitter;
                _loop_1(name_1, eventEmitter);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (observedEmitters_1_1 && !observedEmitters_1_1.done && (_a = observedEmitters_1.return)) _a.call(observedEmitters_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    LottieEventsFacade.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LottieEventsFacade.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return LottieEventsFacade;
}());
export { LottieEventsFacade };
if (false) {
    /**
     * @see https://github.com/airbnb/lottie-web#events
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.eventsMap;
    /**
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.animationItem;
    /**
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    LottieEventsFacade.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLWZhY2FkZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb3R0aWUvIiwic291cmNlcyI6WyJzcmMvZXZlbnRzLWZhY2FkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQWEsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7OztBQVFuRCxTQUFTLHdCQUF3QixDQUFDLFFBQXVCLEVBQUUsU0FBb0I7SUFDN0UsT0FBTyxDQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ25CLDZDQUE2QztTQUM1QyxHQUFHOzs7O0lBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBcEIsQ0FBb0IsRUFBQztTQUNoQyxNQUFNOzs7O0lBQ0wsVUFBQyxFQUFlO1lBQWYsa0JBQWUsRUFBZCxXQUFHLEVBQUUsZ0JBQVE7UUFDYixPQUFBLFFBQVEsWUFBWSxZQUFZO1lBQ2hDLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDN0IsU0FBUyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7SUFGN0IsQ0FFNkIsRUFDaEM7U0FDQSxHQUFHOzs7O0lBQUMsVUFBQyxFQUFtQjtZQUFuQixrQkFBbUIsRUFBbEIsV0FBRyxFQUFFLG9CQUFZO1FBQU0sT0FBQSxDQUFDO1lBQzdCLFlBQVksY0FBQTtZQUNaLElBQUksRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDO1NBQ3JCLENBQUM7SUFINEIsQ0FHNUIsRUFBQyxDQUNOLENBQUM7QUFDSixDQUFDO0FBRUQ7SUFtQkUsNEJBQW9CLE1BQWMsRUFBK0IsVUFBa0I7UUFBL0QsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUErQixlQUFVLEdBQVYsVUFBVSxDQUFROzs7O1FBZDNFLGNBQVMsR0FBYztZQUM3QixRQUFRLEVBQUUsVUFBVTtZQUNwQixZQUFZLEVBQUUsY0FBYztZQUM1QixVQUFVLEVBQUUsWUFBWTtZQUN4QixZQUFZLEVBQUUsY0FBYztZQUM1QixXQUFXLEVBQUUsY0FBYztZQUMzQixTQUFTLEVBQUUsWUFBWTtZQUN2QixTQUFTLEVBQUUsV0FBVztZQUN0QixPQUFPLEVBQUUsU0FBUztZQUNsQixLQUFLLEVBQUUsT0FBTztTQUNmLENBQUM7UUFFTSxrQkFBYSxHQUF5QixJQUFJLENBQUM7SUFFbUMsQ0FBQzs7OztJQUV2Rix3Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQzs7Ozs7O0lBRUQsOENBQWlCOzs7OztJQUFqQixVQUFrQixRQUF1QixFQUFFLGFBQTRCO1FBQXZFLGlCQUtDO1FBSkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsd0VBQXdFO1FBQ3hFLG1FQUFtRTtRQUNuRSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjs7O1FBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxRQUFRLENBQUMsRUFBdkQsQ0FBdUQsRUFBQyxDQUFDO0lBQy9GLENBQUM7Ozs7O0lBRU8sb0NBQU87Ozs7SUFBZjtRQUNFLHVFQUF1RTtRQUN2RSw0REFBNEQ7UUFDNUQsNENBQTRDO1FBQzVDLDBFQUEwRTtRQUMxRSxvQkFBb0I7UUFDcEIsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJLEVBQUU7WUFDcEUsT0FBTztTQUNSO1FBRUQsK0NBQStDO1FBQy9DLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7SUFDNUIsQ0FBQzs7Ozs7O0lBRU8scUVBQXdDOzs7OztJQUFoRCxVQUFpRCxRQUF1Qjs7O1lBQ2hFLGdCQUFnQixHQUFHLHdCQUF3QixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dDQUU5RCxNQUFJLEVBQUUsWUFBWTtZQUM3QixtQkFBQSxPQUFLLGFBQWEsRUFBQyxDQUFDLGdCQUFnQixDQUFDLE1BQUk7Ozs7WUFBRSxVQUFDLEtBQWtCO2dCQUM1RCxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNCLENBQUMsRUFBQyxDQUFDOzs7O1lBSEwsS0FBcUMsSUFBQSxxQkFBQSxTQUFBLGdCQUFnQixDQUFBLGtEQUFBO2dCQUExQyxJQUFBLCtCQUFzQixFQUFwQixnQkFBSSxFQUFFLDhCQUFZO3dCQUFsQixNQUFJLEVBQUUsWUFBWTthQUk5Qjs7Ozs7Ozs7O0lBQ0gsQ0FBQzs7Z0JBdkRGLFVBQVU7Ozs7Z0JBM0JxQixNQUFNOzZDQThDQyxNQUFNLFNBQUMsV0FBVzs7SUFxQ3pELHlCQUFDO0NBQUEsQUF4REQsSUF3REM7U0F2RFksa0JBQWtCOzs7Ozs7O0lBSTdCLHVDQVVFOzs7OztJQUVGLDJDQUFtRDs7Ozs7SUFFdkMsb0NBQXNCOzs7OztJQUFFLHdDQUErQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSwgSW5qZWN0YWJsZSwgTmdab25lLCBJbmplY3QsIEV2ZW50RW1pdHRlciwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBFdmVudHNNYXAsIExvdHRpZUV2ZW50LCBBbmltYXRpb25JdGVtIH0gZnJvbSAnLi9zeW1ib2xzJztcblxuLyoqXG4gKiBSZXR1cm5zIG9ubHkgdGhvc2UgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2VzIHRoYXQgaGFzIGF0dGFjaGVkIG9ic2VydmVyc1xuICovXG5mdW5jdGlvbiBnZXRPYnNlcnZlZEV2ZW50RW1pdHRlcnMoaW5zdGFuY2U6IEJhc2VEaXJlY3RpdmUsIGV2ZW50c01hcDogRXZlbnRzTWFwKSB7XG4gIHJldHVybiAoXG4gICAgT2JqZWN0LmtleXMoaW5zdGFuY2UpXG4gICAgICAvLyBgT2JqZWN0LmVudHJpZXNgIGlzIG5vdCBzdXBwb3J0ZWQgaW4gSUUxMS5cbiAgICAgIC5tYXAoa2V5ID0+IFtrZXksIGluc3RhbmNlW2tleV1dKVxuICAgICAgLmZpbHRlcihcbiAgICAgICAgKFtrZXksIHByb3BlcnR5XSkgPT5cbiAgICAgICAgICBwcm9wZXJ0eSBpbnN0YW5jZW9mIEV2ZW50RW1pdHRlciAmJlxuICAgICAgICAgIHByb3BlcnR5Lm9ic2VydmVycy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgZXZlbnRzTWFwLmhhc093blByb3BlcnR5KGtleSlcbiAgICAgIClcbiAgICAgIC5tYXAoKFtrZXksIGV2ZW50RW1pdHRlcl0pID0+ICh7XG4gICAgICAgIGV2ZW50RW1pdHRlcixcbiAgICAgICAgbmFtZTogZXZlbnRzTWFwW2tleV1cbiAgICAgIH0pKVxuICApO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG90dGllRXZlbnRzRmFjYWRlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9sb3R0aWUtd2ViI2V2ZW50c1xuICAgKi9cbiAgcHJpdmF0ZSBldmVudHNNYXA6IEV2ZW50c01hcCA9IHtcbiAgICBjb21wbGV0ZTogJ2NvbXBsZXRlJyxcbiAgICBsb29wQ29tcGxldGU6ICdsb29wQ29tcGxldGUnLFxuICAgIGVudGVyRnJhbWU6ICdlbnRlckZyYW1lJyxcbiAgICBzZWdtZW50U3RhcnQ6ICdzZWdtZW50U3RhcnQnLFxuICAgIGNvbmZpZ1JlYWR5OiAnY29uZmlnX3JlYWR5JyxcbiAgICBkYXRhUmVhZHk6ICdkYXRhX3JlYWR5JyxcbiAgICBkb21Mb2FkZWQ6ICdET01Mb2FkZWQnLFxuICAgIGRlc3Ryb3k6ICdkZXN0cm95JyxcbiAgICBlcnJvcjogJ2Vycm9yJ1xuICB9O1xuXG4gIHByaXZhdGUgYW5pbWF0aW9uSXRlbTogQW5pbWF0aW9uSXRlbSB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogc3RyaW5nKSB7fVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGlzcG9zZSgpO1xuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcnMoaW5zdGFuY2U6IEJhc2VEaXJlY3RpdmUsIGFuaW1hdGlvbkl0ZW06IEFuaW1hdGlvbkl0ZW0pOiB2b2lkIHtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0gPSBhbmltYXRpb25JdGVtO1xuICAgIC8vIGBBbmltYXRpb25JdGVtYCB0cmlnZ2VycyBkaWZmZXJlbnQgZXZlbnRzIGV2ZXJ5IG1zLCB3ZSBoYXZlIHRvIGxpc3RlblxuICAgIC8vIHRoZW0gb3V0c2lkZSBBbmd1bGFyJ3MgY29udGV4dCwgdGh1cyBpdCB3b24ndCBhZmZlY3QgcGVyZm9ybWFuY2VcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzVG9PYnNlcnZlZEV2ZW50RW1pdHRlcnMoaW5zdGFuY2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICAvLyBUaGUgYG5nLWxvdHRpZWAgY29tcG9uZW50IG9yIHRoZSBgbG90dGllYCBkaXJlY3RpdmUgY2FuIGJlIGRlc3Ryb3llZFxuICAgIC8vIGJlZm9yZSB0aGUgYGFuaW1hdGlvbkl0ZW1gIGlzIHNldCwgdGh1cyBpdCB3aWxsIGZhaWwgd2l0aFxuICAgIC8vIGBDYW5ub3QgcmVhZCBwcm9wZXJ0eSAnZGVzdHJveScgb2YgbnVsbGAuXG4gICAgLy8gUG90ZW50aWFsbHkgaXQgY2FuIGhhcHBlbiBpZiB0aGUgZGlyZWN0aXZlIGdldHMgZGVzdHJveWVkIGJlZm9yZSBjaGFuZ2VcbiAgICAvLyBkZXRlY3Rpb24gaXMgcnVuLlxuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkgfHwgdGhpcy5hbmltYXRpb25JdGVtID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYGRlc3Ryb3koKWAgd2lsbCByZW1vdmUgYWxsIGV2ZW50cyBsaXN0ZW5lcnNcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0uZGVzdHJveSgpO1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IG51bGw7XG4gIH1cblxuICBwcml2YXRlIGFkZEV2ZW50TGlzdGVuZXJzVG9PYnNlcnZlZEV2ZW50RW1pdHRlcnMoaW5zdGFuY2U6IEJhc2VEaXJlY3RpdmUpOiB2b2lkIHtcbiAgICBjb25zdCBvYnNlcnZlZEVtaXR0ZXJzID0gZ2V0T2JzZXJ2ZWRFdmVudEVtaXR0ZXJzKGluc3RhbmNlLCB0aGlzLmV2ZW50c01hcCk7XG5cbiAgICBmb3IgKGNvbnN0IHsgbmFtZSwgZXZlbnRFbWl0dGVyIH0gb2Ygb2JzZXJ2ZWRFbWl0dGVycykge1xuICAgICAgdGhpcy5hbmltYXRpb25JdGVtIS5hZGRFdmVudExpc3RlbmVyKG5hbWUsIChldmVudDogTG90dGllRXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnRFbWl0dGVyLmVtaXQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=