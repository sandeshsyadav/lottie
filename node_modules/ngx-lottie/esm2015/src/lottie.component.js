/**
 * @fileoverview added by tsickle
 * Generated from: src/lottie.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Inject, ElementRef, ViewChild, Self, PLATFORM_ID } from '@angular/core';
import { BaseDirective } from './base.directive';
import { AnimationLoader } from './animation-loader';
import { LottieEventsFacade } from './events-facade';
export class LottieComponent extends BaseDirective {
    /**
     * @param {?} platformId
     * @param {?} eventsFacade
     * @param {?} animationLoader
     */
    constructor(platformId, eventsFacade, animationLoader) {
        super(platformId, animationLoader);
        this.eventsFacade = eventsFacade;
        this.container = (/** @type {?} */ (null));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.setWidthAndHeight();
        super.loadAnimation(this.container.nativeElement, this.eventsFacade, this);
    }
}
LottieComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-lottie',
                template: `
    <div
      #container
      [style.width]="width"
      [style.height]="height"
      [ngStyle]="styles"
      [ngClass]="containerClass"
    ></div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [LottieEventsFacade]
            }] }
];
/** @nocollapse */
LottieComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: LottieEventsFacade, decorators: [{ type: Self }] },
    { type: AnimationLoader }
];
LottieComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { static: true },] }]
};
if (false) {
    /** @type {?} */
    LottieComponent.prototype.container;
    /**
     * @type {?}
     * @private
     */
    LottieComponent.prototype.eventsFacade;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG90dGllLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb3R0aWUvIiwic291cmNlcyI6WyJzcmMvbG90dGllLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsdUJBQXVCLEVBRXZCLE1BQU0sRUFDTixVQUFVLEVBQ1YsU0FBUyxFQUNULElBQUksRUFDSixXQUFXLEVBQ1osTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQWdCckQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsYUFBYTs7Ozs7O0lBR2hELFlBQ3VCLFVBQWtCLEVBQ3ZCLFlBQWdDLEVBQ2hELGVBQWdDO1FBRWhDLEtBQUssQ0FBQyxVQUFVLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFIbkIsaUJBQVksR0FBWixZQUFZLENBQW9CO1FBSlIsY0FBUyxHQUE0QixtQkFBQSxJQUFJLEVBQUMsQ0FBQztJQVFyRixDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQzFCLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3RSxDQUFDOzs7WUE1QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxXQUFXO2dCQUNyQixRQUFRLEVBQUU7Ozs7Ozs7O0dBUVQ7Z0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFNBQVMsRUFBRSxDQUFDLGtCQUFrQixDQUFDO2FBQ2hDOzs7O3lDQUtJLE1BQU0sU0FBQyxXQUFXO1lBcEJkLGtCQUFrQix1QkFxQnRCLElBQUk7WUF0QkEsZUFBZTs7O3dCQWtCckIsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Ozs7SUFBeEMsb0NBQXFGOzs7OztJQUluRix1Q0FBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBPbkluaXQsXG4gIEluamVjdCxcbiAgRWxlbWVudFJlZixcbiAgVmlld0NoaWxkLFxuICBTZWxmLFxuICBQTEFURk9STV9JRFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uTG9hZGVyIH0gZnJvbSAnLi9hbmltYXRpb24tbG9hZGVyJztcbmltcG9ydCB7IExvdHRpZUV2ZW50c0ZhY2FkZSB9IGZyb20gJy4vZXZlbnRzLWZhY2FkZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nLWxvdHRpZScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdlxuICAgICAgI2NvbnRhaW5lclxuICAgICAgW3N0eWxlLndpZHRoXT1cIndpZHRoXCJcbiAgICAgIFtzdHlsZS5oZWlnaHRdPVwiaGVpZ2h0XCJcbiAgICAgIFtuZ1N0eWxlXT1cInN0eWxlc1wiXG4gICAgICBbbmdDbGFzc109XCJjb250YWluZXJDbGFzc1wiXG4gICAgPjwvZGl2PlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbTG90dGllRXZlbnRzRmFjYWRlXVxufSlcbmV4cG9ydCBjbGFzcyBMb3R0aWVDb21wb25lbnQgZXh0ZW5kcyBCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgQFZpZXdDaGlsZCgnY29udGFpbmVyJywgeyBzdGF0aWM6IHRydWUgfSkgY29udGFpbmVyOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PiA9IG51bGwhO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IHN0cmluZyxcbiAgICBAU2VsZigpIHByaXZhdGUgZXZlbnRzRmFjYWRlOiBMb3R0aWVFdmVudHNGYWNhZGUsXG4gICAgYW5pbWF0aW9uTG9hZGVyOiBBbmltYXRpb25Mb2FkZXJcbiAgKSB7XG4gICAgc3VwZXIocGxhdGZvcm1JZCwgYW5pbWF0aW9uTG9hZGVyKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHN1cGVyLnNldFdpZHRoQW5kSGVpZ2h0KCk7XG4gICAgc3VwZXIubG9hZEFuaW1hdGlvbih0aGlzLmNvbnRhaW5lci5uYXRpdmVFbGVtZW50LCB0aGlzLmV2ZW50c0ZhY2FkZSwgdGhpcyk7XG4gIH1cbn1cbiJdfQ==